# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'equalizer.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg
from pyqtgraph import PlotWidget
from PyQt5 import QtCore, QtGui, QtWidgets, QtMultimedia
from PyQt5.QtWidgets import QInputDialog, QFileDialog , QSizePolicy , QLineEdit ,QPushButton ,QTabWidget
from scipy.io import wavfile
from PyQt5.QtCore import QTimer
import pyqtgraph as pg
from matplotlib.figure import Figure
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
import sounddevice as sd
import numpy as np
from scipy.fftpack import rfft,rfftfreq,irfft
from PyQt5.QtWidgets import QWidget, QLineEdit, QVBoxLayout, QTabWidget, QMainWindow, QMenuBar, QStatusBar, QFileDialog ,QLabel ,QGridLayout
from pyqtgraph import PlotWidget
from PyQt5.QtCore import QCoreApplication , QRect
from PyQt5.QtCore import QSize
import threading
from pydub import AudioSegment
from pydub.playback import play
from scipy.io import wavfile
import wave
import numpy as np
import scipy.signal
from scipy.signal import square
import os
import pandas as pd
from scipy.io.wavfile import write

from scipy.signal.windows import hamming, hann, gaussian

import handle
from matplotlib import pyplot as plt

class MplCanvas(FigureCanvasQTAgg):

    def __init__(self, parent=None, width=15, height=15, dpi=100):
        fig = Figure(figsize=(width, height), dpi=dpi)
        self.axes = fig.add_subplot(111)
        super(MplCanvas, self).__init__(fig)



class Ui_MainWindow(object):
    original_sig = np.array([])
    original_signal = np.array([])
    normalized_signal = np.array([])
    Equalized_signal = None  # Initialize the attribute with an appropriate value
    playback_thread = None
    original_complex = np.array([])
    modified_sig = np.array([])
    modified_complex = np.array([])
    freq = np.array([])
    redraw = np.array([])
    last_pos = 0
    playback_pos = 0
    last_of_sound = 0

    buffer_size = 8192  # Adjust the buffer size as needed
    buffer = np.zeros(buffer_size)
    buffer_pos = 0

    file_name=""

    freq_min = []
    freq_max = []

    output_sig1 = np.array([])
    output_sig2 = np.array([])
    sample_rate = 0
    signal_playing = False  # Track the audio playback state
    audio_playing = False
    audio_playing2 = False
    move = False
    playback_position = 0  # Track the playback position
    plotting_speed = 600
    isPaused = False
    graph_rangeMin = [0, 0, 0]
    graph_rangeMax = [1000, 1000, 1000]
    slider_amp = []
    tab_names = ['Rectangular', 'Hanning', 'Hamming', 'Gaussian']
    pen_colors = ['b', 'g', 'r', 'c']



    loaded = False

    ## min , max pixel intensity
    min_list = [0.5, 0.5, 0.5]
    max_list = [1.0, 1.0, 1.0]

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1350, 820)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("../../Python2/signal.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setToolButtonStyle(QtCore.Qt.ToolButtonTextOnly)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")


        self.inputWidget = PlotWidget(self.centralwidget)
        self.inputWidget.setGeometry(QtCore.QRect(20, 30, 561, 200))
        self.inputWidget.setObjectName("inputWidget")

        self.inputspectroWidget = PlotWidget(self.centralwidget)
        self.inputspectroWidget.setGeometry(QtCore.QRect(610, 30, 330, 200))
        self.inputspectroWidget.setObjectName("inputspectroWidget")

        self.outputspectroWidget = PlotWidget(self.centralwidget)
        self.outputspectroWidget.setGeometry(QtCore.QRect(610, 240, 330, 200))
        self.outputspectroWidget.setObjectName("outputspectroWidget")

        self.outputWidget = PlotWidget(self.centralwidget)
        self.outputWidget.setGeometry(QtCore.QRect(20, 240, 561, 200))
        self.outputWidget.setObjectName("outputWidget")

        self.editingWidget = PlotWidget(self.centralwidget)
        self.editingWidget.setGeometry(QtCore.QRect(20, 450, 920, 210))
        self.editingWidget.setObjectName("editingWidgetWidget")

        # Create a tab widget
        self.tabWidget = QTabWidget(self.centralwidget)
        self.tabWidget.setObjectName("tabWidget")
        self.tabWidget.setGeometry(950, 5, 400, 200)


        # Create a tab for Rectangular
        self.Rectangular = QWidget()
        self.Rectangular.setObjectName("Rectangular")
        self.Rectangularwidget = QWidget(self.Rectangular)
        self.Rectangularwidget.setObjectName("Rectangularwidget")
        self.Rectangularwidget.setGeometry(30, 20, 271, 131)
        self.Rectangularwidget.setAcceptDrops(False)
        self.Rectangularwidget.setAutoFillBackground(True)
        # Use PlotWidget from PyQtGraph for plotting
        self.plotRectangular = PlotWidget(self.Rectangular)
        self.plotRectangular.setObjectName("plotRectangular")
        self.plotRectangular.setGeometry(QtCore.QRect(10, 10, 250, 130))
        self.tabWidget.addTab(self.Rectangular, "")

        # Create a tab for Hanning
        self.Hanning = QWidget()
        self.Hanning.setObjectName(u"Hanning")
        self.Hanningwidget = QWidget(self.Hanning)
        self.Hanningwidget.setObjectName(u"Hanningwidget")
        self.Hanningwidget.setGeometry(30, 20, 271, 131)
        self.Hanningwidget.setAcceptDrops(False)
        self.Hanningwidget.setAutoFillBackground(True)
        # Use PlotWidget from PyQtGraph for plotting
        self.plotHanning = PlotWidget(self.Hanning)
        self.plotHanning.setObjectName(u"plotHanning")
        self.plotHanning.setGeometry(10, 10, 250, 130)
        self.tabWidget.addTab(self.Hanning, "")

        # Create a tab for Hamming
        self.Hamming = QWidget()
        self.Hamming.setObjectName(u"Hamming")
        self.Hammingwidget = QWidget(self.Hamming)
        self.Hammingwidget.setObjectName(u"Hammingwidget")
        self.Hammingwidget.setGeometry(30, 20, 271, 131)
        self.Hammingwidget.setAcceptDrops(False)
        self.Hammingwidget.setAutoFillBackground(True)
        # Use PlotWidget from PyQtGraph for plotting
        self.plotHamming = PlotWidget(self.Hamming)
        self.plotHamming.setObjectName(u"plotHamming")
        self.plotHamming.setGeometry(10, 10, 250, 130)
        self.tabWidget.addTab(self.Hamming, "")

        # Create a tab for Gaussian
        self.Gaussian = QWidget()
        self.Gaussian.setObjectName(u"Gaussian")
        self.Gaussianwidget = QWidget(self.Gaussian)
        self.Gaussianwidget.setObjectName(u"Gaussianwidget")
        self.Gaussianwidget.setGeometry(30, 20, 271, 131)
        self.Gaussianwidget.setAcceptDrops(False)
        self.Gaussianwidget.setAutoFillBackground(True)
        # Use PlotWidget from PyQtGraph for plotting
        self.plotGaussian = PlotWidget(self.Gaussian)
        self.plotGaussian.setObjectName(u"plotGaussian")
        self.plotGaussian.setGeometry(10, 10, 250, 130)
        self.tabWidget.addTab(self.Gaussian, "")

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QMenuBar(MainWindow)
        self.menubar.setObjectName(u"menubar")
        self.menubar.setGeometry(0, 0, 1000, 26)
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QStatusBar(MainWindow)
        self.statusbar.setObjectName(u"statusbar")
        MainWindow.setStatusBar(self.statusbar)


        self.vSlider1 = QtWidgets.QSlider(self.centralwidget)
        self.vSlider1.setMinimumSize(QtCore.QSize(160 ,22))
        self.vSlider1.setMaximum(5)
        self.vSlider1.setProperty("value", 1)
        self.vSlider1.setOrientation(QtCore.Qt.Horizontal)
        self.vSlider1.setTickPosition(QtWidgets.QSlider.TicksBothSides)
        self.vSlider1.setTickInterval(1)
        self.vSlider1.setObjectName("vSlider1")
        self.label_1 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(6)
        font.setBold(True)
        font.setWeight(75)
        self.label_1.setFont(font)
        self.label_1.setObjectName("label")

        self.vSlider2 = QtWidgets.QSlider(self.centralwidget)
        self.vSlider2.setMinimumSize(QtCore.QSize(160 ,22))
        self.vSlider2.setMaximum(5)
        self.vSlider2.setProperty("value", 1)
        self.vSlider2.setOrientation(QtCore.Qt.Horizontal)
        self.vSlider2.setTickPosition(QtWidgets.QSlider.TicksBothSides)
        self.vSlider2.setTickInterval(1)
        self.vSlider2.setObjectName("vSlider2")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(6)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")

        self.vSlider3 = QtWidgets.QSlider(self.centralwidget)
        self.vSlider3.setMinimumSize(QtCore.QSize(160 ,22))
        self.vSlider3.setMaximum(5)
        self.vSlider3.setProperty("value", 1)
        self.vSlider3.setOrientation(QtCore.Qt.Horizontal)
        self.vSlider3.setTickPosition(QtWidgets.QSlider.TicksBothSides)
        self.vSlider3.setTickInterval(1)
        self.vSlider3.setObjectName("vSlider3")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(6)
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")


        self.vSlider4 = QtWidgets.QSlider(self.centralwidget)
        self.vSlider4.setMinimumSize(QtCore.QSize(160 ,22))
        self.vSlider4.setMaximum(5)
        self.vSlider4.setProperty("value", 1)
        self.vSlider4.setOrientation(QtCore.Qt.Horizontal)
        self.vSlider4.setTickPosition(QtWidgets.QSlider.TicksBothSides)
        self.vSlider4.setTickInterval(1)
        self.vSlider4.setObjectName("vSlider4")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(6)
        font.setBold(True)
        font.setWeight(75)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")

        self.vSlider5 = QtWidgets.QSlider(self.centralwidget)
        self.vSlider5.setMinimumSize(QtCore.QSize(160 ,22))
        self.vSlider5.setMaximum(5)
        self.vSlider5.setProperty("value", 1)
        self.vSlider5.setOrientation(QtCore.Qt.Horizontal)
        self.vSlider5.setTickPosition(QtWidgets.QSlider.TicksBothSides)
        self.vSlider5.setTickInterval(1)
        self.vSlider5.setObjectName("vSlider5")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(6)
        font.setBold(True)
        font.setWeight(75)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")

        self.vSlider6 = QtWidgets.QSlider(self.centralwidget)
        self.vSlider6.setMinimumSize(QtCore.QSize(160 ,22))
        self.vSlider6.setMaximum(5)
        self.vSlider6.setProperty("value", 1)
        self.vSlider6.setOrientation(QtCore.Qt.Horizontal)
        self.vSlider6.setTickPosition(QtWidgets.QSlider.TicksBothSides)
        self.vSlider6.setTickInterval(1)
        self.vSlider6.setObjectName("vSlider6")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(6)
        font.setBold(True)
        font.setWeight(75)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")

        self.vSlider7 = QtWidgets.QSlider(self.centralwidget)
        self.vSlider7.setMinimumSize(QtCore.QSize(160 ,22))
        self.vSlider7.setMaximum(5)
        self.vSlider7.setProperty("value", 1)
        self.vSlider7.setOrientation(QtCore.Qt.Horizontal)
        self.vSlider7.setTickPosition(QtWidgets.QSlider.TicksBothSides)
        self.vSlider7.setTickInterval(1)
        self.vSlider7.setObjectName("vSlider7")
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(6)
        font.setBold(True)
        font.setWeight(75)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")

        self.vSlider8 = QtWidgets.QSlider(self.centralwidget)
        self.vSlider8.setMinimumSize(QtCore.QSize(160 ,22))
        self.vSlider8.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.vSlider8.setAutoFillBackground(False)
        self.vSlider8.setMaximum(5)
        self.vSlider8.setProperty("value", 1)
        self.vSlider8.setTracking(True)
        self.vSlider8.setOrientation(QtCore.Qt.Horizontal)
        self.vSlider8.setTickPosition(QtWidgets.QSlider.TicksBothSides)
        self.vSlider8.setTickInterval(1)
        self.vSlider8.setObjectName("vSlider8")
        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(6)
        font.setBold(True)
        font.setWeight(75)
        self.label_8.setFont(font)
        self.label_8.setObjectName("label_8")

        self.vSlider9 = QtWidgets.QSlider(self.centralwidget)
        self.vSlider9.setMinimumSize(QtCore.QSize(160 ,22))
        self.vSlider9.setMaximum(5)
        self.vSlider9.setProperty("value", 1)
        self.vSlider9.setOrientation(QtCore.Qt.Horizontal)
        self.vSlider9.setTickPosition(QtWidgets.QSlider.TicksBothSides)
        self.vSlider9.setTickInterval(1)
        self.vSlider9.setObjectName("vSlider9")
        self.label_9 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(6)
        font.setBold(True)
        font.setWeight(75)
        self.label_9.setFont(font)
        self.label_9.setObjectName("label_9")

        self.label_10 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(6)
        font.setBold(True)
        font.setWeight(75)
        self.label_10.setFont(font)
        self.label_10.setObjectName("label_10")
        self.vSlider10 = QtWidgets.QSlider(self.centralwidget)
        self.vSlider10.setMinimumSize(QtCore.QSize(160 ,22))
        self.vSlider10.setMaximum(5)
        self.vSlider10.setProperty("value", 1)
        self.vSlider10.setOrientation(QtCore.Qt.Horizontal)
        self.vSlider10.setTickPosition(QtWidgets.QSlider.TicksBothSides)
        self.vSlider10.setTickInterval(1)
        self.vSlider10.setObjectName("vSlider10")

        self.gridLayoutWidget = QWidget(self.centralwidget)
        self.gridLayoutWidget.setObjectName(u"gridLayoutWidget")
        self.gridLayoutWidget.setGeometry(QRect(1000, 170, 251, 511))
        self.gridLayout = QGridLayout(self.gridLayoutWidget)
        self.gridLayout.setObjectName(u"gridLayout")
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        # Create a grid layout for sliders and labels

        # Add sliders and labels to the layout
        sliders_and_labels = [
            (self.label_1, self.vSlider1),
            (self.label_2, self.vSlider2),
            (self.label_3, self.vSlider3),
            (self.label_4, self.vSlider4),
            (self.label_5, self.vSlider5),
            (self.label_6, self.vSlider6),
            (self.label_7, self.vSlider7),
            (self.label_8, self.vSlider8),
            (self.label_9, self.vSlider9),
            (self.label_10, self.vSlider10),
        ]

        for row, (label ,slider) in enumerate(sliders_and_labels):
            self.gridLayout.addWidget(label, row, 1)
            self.gridLayout.addWidget(slider, row, 0)


        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.setGeometry(QtCore.QRect(410, 10, 121, 16))
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.spectroShow = QtWidgets.QCheckBox(self.centralwidget)
        self.spectroShow.setGeometry(QtCore.QRect(630, 10, 201, 20))
        self.spectroShow.setObjectName("spectroShow")
        self.checkBox = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox.setGeometry(QtCore.QRect(30, 10, 70, 17))
        self.checkBox.setText("")
        self.checkBox.setObjectName("checkBox")

        self.checkoutputwidget = QtWidgets.QCheckBox(self.centralwidget)
        self.checkoutputwidget.setGeometry(QtCore.QRect(18, 220, 70, 17))
        self.checkoutputwidget.setText("")
        self.checkoutputwidget.setObjectName("checkoutputwidget")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.toolBar = QtWidgets.QToolBar(MainWindow)
        self.toolBar.setToolButtonStyle(QtCore.Qt.ToolButtonIconOnly)
        self.toolBar.setObjectName("toolBar")
        MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar)
        self.leftBtn = QtWidgets.QAction(MainWindow)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("../../Downloads/images/left.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.leftBtn.setIcon(icon1)
        self.leftBtn.setObjectName("leftBtn")
        self.rightBtn = QtWidgets.QAction(MainWindow)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("../../Downloads/images/right.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.rightBtn.setIcon(icon2)
        self.rightBtn.setObjectName("rightBtn")
        self.zoomOutBtn = QtWidgets.QAction(MainWindow)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("../../Downloads/images/zoom-out.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.zoomOutBtn.setIcon(icon3)
        self.zoomOutBtn.setObjectName("zoomOutBtn")
        self.OpenSignalBtn = QtWidgets.QAction(MainWindow)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("../../Downloads/images/browse.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.OpenSignalBtn.setIcon(icon4)
        self.OpenSignalBtn.setIconVisibleInMenu(True)
        self.OpenSignalBtn.setObjectName("OpenSignalBtn")
        self.soundBtn = QtWidgets.QAction(MainWindow)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap("../../Downloads/images/play.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.soundBtn.setIcon(icon5)
        self.soundBtn.setObjectName("soundBtn")
        self.saveBtn = QtWidgets.QAction(MainWindow)
        self.saveBtn.setCheckable(False)
        self.saveBtn.setChecked(False)
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap("../../Downloads/images/save1.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.saveBtn.setIcon(icon6)
        self.saveBtn.setObjectName("saveBtn")
        self.zoomInBtn = QtWidgets.QAction(MainWindow)
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap("../../Downloads/images/zoom-in.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.zoomInBtn.setIcon(icon7)
        self.zoomInBtn.setObjectName("zoomInBtn")
        self.moveBtn = QtWidgets.QAction(MainWindow)
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap("../../Downloads/images/pause.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.moveBtn.setIcon(icon8)
        self.moveBtn.setObjectName("moveBtn")
        self.returnBtn = QtWidgets.QAction(MainWindow)
        icon9 = QtGui.QIcon()
        icon9.addPixmap(QtGui.QPixmap("../../Downloads/images/stop.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.returnBtn.setIcon(icon9)
        self.returnBtn.setObjectName("returnBtn")
        self.speedBtn = QtWidgets.QAction(MainWindow)
        icon10 = QtGui.QIcon()
        icon10.addPixmap(QtGui.QPixmap("../../Downloads/images/speed up.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.speedBtn.setIcon(icon10)
        self.speedBtn.setObjectName("speedBtn")
        self.slowBtn = QtWidgets.QAction(MainWindow)
        icon11 = QtGui.QIcon()
        icon11.addPixmap(QtGui.QPixmap("../../Downloads/images/speed down.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.slowBtn.setIcon(icon11)
        self.slowBtn.setObjectName("slowBtn")

        self.clearBtn = QtWidgets.QAction(MainWindow)
        icon12 = QtGui.QIcon()
        icon12.addPixmap(QtGui.QPixmap("../../Downloads/images/speed down.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.clearBtn.setIcon(icon12)
        self.clearBtn.setObjectName("clear")

        self.toolBar.addAction(self.OpenSignalBtn)
        self.toolBar.addAction(self.soundBtn)
        self.toolBar.addAction(self.moveBtn)
        self.toolBar.addAction(self.returnBtn)
        self.toolBar.addAction(self.zoomInBtn)
        self.toolBar.addAction(self.zoomOutBtn)
        self.toolBar.addAction(self.rightBtn)
        self.toolBar.addAction(self.leftBtn)
        self.toolBar.addAction(self.saveBtn)
        self.toolBar.addAction(self.speedBtn)
        self.toolBar.addAction(self.slowBtn)
        self.toolBar.addAction(self.clearBtn)



        # Apply dark and blue theme stylesheets
        MainWindow.setStyleSheet("background-color: #12171d; border: none; color: #FFFFFF;")
        self.centralwidget.setStyleSheet("background-color: #12171d; border: none; color: #FFFFFF;")
        self.toolBar.setStyleSheet("background-color: #12171d; height: 30px;")
        self.toolBar.setStyleSheet("QToolBar QToolButton { background-color: #003366; border: none; color: #FFFFFF; width:80px; height: 30px; border-radius: 10px;}"
                                   "QToolBar QToolButton:hover { background-color: #007ACC; height: 30px; width:80px;}"
                                   "QToolBar QToolButton:checked { background-color: #003366; height: 30px; width:80px;}")

        self.tabWidget.setStyleSheet("QTabWidget::pane { border: none; }"
                                     "QTabBar::tab { background-color: #007ACC; color: #FFFFFF; }"
                                     "QTabBar::tab:selected { background-color: #003366; }")

        # Modify stylesheets for individual components as needed
        # For example:
        slider_style = "QSlider::handle:horizontal { background-color: #007ACC; border-radius: 10px; }" "QSlider::sub-page:vertical { background-color: #003366; border-radius: 10px; }"
        self.vSlider1.setStyleSheet(slider_style)
        self.vSlider2.setStyleSheet(slider_style)
        self.vSlider3.setStyleSheet(slider_style)
        self.vSlider4.setStyleSheet(slider_style)
        self.vSlider5.setStyleSheet(slider_style)
        self.vSlider6.setStyleSheet(slider_style)
        self.vSlider7.setStyleSheet(slider_style)
        self.vSlider8.setStyleSheet(slider_style)
        self.vSlider9.setStyleSheet(slider_style)
        self.vSlider10.setStyleSheet(slider_style)

        lable_style = "font-size: 10pt;"
        self.label_1.setStyleSheet(lable_style)
        self.label_2.setStyleSheet(lable_style)
        self.label_3.setStyleSheet(lable_style)
        self.label_4.setStyleSheet(lable_style)
        self.label_5.setStyleSheet(lable_style)
        self.label_6.setStyleSheet(lable_style)
        self.label_7.setStyleSheet(lable_style)
        self.label_8.setStyleSheet(lable_style)
        self.label_9.setStyleSheet(lable_style)
        self.label_10.setStyleSheet(lable_style)

        button_size = "min-width: 100px; max-width: 200px; min-height: 30px; max-height: 30px;"
        button_style = (
            f"QPushButton {{ {button_size} background-color: #003366; color: #ffffff; border-radius: 10px; margin-left: 70px; margin-right: 70px; }}"
            f"QToolBar QToolButton:hover {{ background-color: #007ACC; height: 30px; width:80px; }}"
            f"QToolBar QToolButton:checked {{ background-color: #003366; height: 30px; width:80px; }}")

        # self.pushRectangleButton.setStyleSheet(button_style)
        # self.pushHanningButton.setStyleSheet(button_style)
        # self.pushHammingButton.setStyleSheet(button_style)
        # self.pushGaussianButton.setStyleSheet(button_style)

        # lineEdit_style = "QLineEdit { background-color: black; color: white; border: 1px solid gray; border-radius: 5px; padding: 0 8px; } QLineEdit:focus { border: 2px solid #4DA8DA; }"
        # #self.lineRectangleEdit.setStyleSheet(lineEdit_style)
        # self.lineHanningEdit.setStyleSheet(lineEdit_style)
        # self.lineHammingEdit.setStyleSheet(lineEdit_style)
        # self.lineGaussianEdit.setStyleSheet(lineEdit_style)

        # input_style = "background-color: #000000; color: #ffffff; border-radius: 5px;"
        # self.amplitudeRectangle.setStyleSheet(input_style)
        # self.amplitudeHanning.setStyleSheet(input_style)
        # self.amplitudeHamming.setStyleSheet(input_style)
        # self.amplitudeGaussian.setStyleSheet(input_style)



        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.tabWidget.setCurrentIndex(0)

        self.cursor_line = pg.InfiniteLine(pos=0, movable=True, bounds=[0, len(self.original_sig) - 1])
        self.inputWidget.addItem(self.cursor_line)



        self.timer = QTimer()
        self.timer.timeout.connect(self.plot_point_by_point)
        self.canvas = FigureCanvas(Figure())
        self.figure = Figure()
        self.canvas = FigureCanvas(self.figure)

        self.data_line = self.editingWidget.plot(pen=pg.mkPen('g'))

        self.OpenSignalBtn.triggered.connect(self.read_file)
        self.moveBtn.triggered.connect(self.play_pause_signal)
        self.returnBtn.triggered.connect(self.replay)
        self.zoomInBtn.triggered.connect(lambda: self.zoom_in_out(0.5))
        self.zoomOutBtn.triggered.connect(lambda: self.zoom_in_out(2))
        self.leftBtn.triggered.connect(lambda: self.move_right_left(-1000))
        self.rightBtn.triggered.connect(lambda: self.move_right_left(1000))
        self.speedBtn.triggered.connect(self.speedUp)
        self.slowBtn.triggered.connect(self.speedDown)
        self.saveBtn.triggered.connect(self.save)
        self.clearBtn.triggered.connect(self.clear)
        self.tabWidget.currentChanged.connect(self.default)
        self.checkBox.stateChanged.connect(self.update_checkoutputBox)
        self.checkoutputwidget.stateChanged.connect(self.update_checkBox)

        self.signal_timer = QTimer()
        self.signal_timer.timeout.connect(self.plot_point_by_point)
        self.audio_timer = QTimer()
        self.soundBtn.triggered.connect(self.play_pause_sound)
        self.spectroShow.stateChanged.connect(self.toggleGraphVisibility)

        self.vSlider1.setMinimum(0)
        self.vSlider1.setMaximum(10)
        self.vSlider2.setMinimum(0)
        self.vSlider2.setMaximum(10)
        self.vSlider3.setMinimum(0)
        self.vSlider3.setMaximum(10)
        self.vSlider4.setMinimum(0)
        self.vSlider4.setMaximum(10)
        self.vSlider5.setMinimum(0)
        self.vSlider5.setMaximum(10)
        self.vSlider6.setMinimum(0)
        self.vSlider6.setMaximum(10)
        self.vSlider7.setMinimum(0)
        self.vSlider7.setMaximum(10)
        self.vSlider8.setMinimum(0)
        self.vSlider8.setMaximum(10)
        self.vSlider9.setMinimum(0)
        self.vSlider9.setMaximum(10)
        self.vSlider10.setMinimum(0)
        self.vSlider10.setMaximum(10)
################
        self.vSlider1.valueChanged.connect(self.save)
        self.vSlider2.valueChanged.connect(self.save)
        self.vSlider3.valueChanged.connect(self.save)
        self.vSlider4.valueChanged.connect(self.save)
        self.vSlider5.valueChanged.connect(self.save)
        self.vSlider6.valueChanged.connect(self.save)
        self.vSlider7.valueChanged.connect(self.save)
        self.vSlider8.valueChanged.connect(self.save)
        self.vSlider9.valueChanged.connect(self.save)
        self.vSlider10.valueChanged.connect(self.save)



        self.sliderarr = [self.vSlider1, self.vSlider2, self.vSlider3, self.vSlider4, self.vSlider5,
                        self.vSlider6, self.vSlider7, self.vSlider8, self.vSlider9, self.vSlider10]

        for i in range(0, 10):
            self.connect_sliders(i)


        self.spectroCanvas = MplCanvas(
            self.inputspectroWidget, width=10, height=20, dpi=60)

        self.specLayout = QtWidgets.QVBoxLayout()
        self.specLayout.addWidget(self.spectroCanvas)
        self.graph = pg.PlotItem()
        pg.PlotItem.hideAxis(self.graph, 'left')
        pg.PlotItem.hideAxis(self.graph, 'bottom')

        self.spectroCanvas2 = MplCanvas(
            self.outputspectroWidget, width=10, height=20, dpi=60)
        self.specLayout2 = QtWidgets.QVBoxLayout()
        self.specLayout2.addWidget(self.spectroCanvas2)
        self.graph2 = pg.PlotItem()
        pg.PlotItem.hideAxis(self.graph2, 'left')
        pg.PlotItem.hideAxis(self.graph2, 'bottom')


        self.default()

        self.comboBox.currentIndexChanged.connect(self.update_ui)
        self.update_ui()



    def default(self):
        selected_index = self.tabWidget.currentIndex()

        # Reset previous plots
        self.plotRectangular.clear()
        self.plotHanning.clear()
        self.plotHamming.clear()
        self.plotGaussian.clear()

        amplitude = 1.0
        t = np.arange(0, 1, 1 / 1000)

        signal_functions = {
            # 0: lambda t: amplitude * np.abs( np.sign(np.sin(2 * np.pi * 1 * t))),
            0: lambda t: scipy.signal.boxcar(len(t)),
            1: lambda t: amplitude * np.hanning(len(t)),
            2: lambda t: amplitude * np.hamming(len(t)),
            3: lambda t: amplitude * gaussian(len(t), std=100)
        }

        if selected_index in signal_functions:
            # Get the signal function based on the selected index
            signal_function = signal_functions[selected_index]

            # Generate and plot the signal
            signal = signal_function(t)
            plot_item = getattr(self, f'plot{self.tab_names[selected_index]}')
            plot_item.plot(t, signal, pen=self.pen_colors[selected_index], name=f'{self.tab_names[selected_index]} Signal')

    def clear(self):
        attributes_to_clear = [
            'sample_rate', 'original_sig', 'original_signal', 'normalized_signal',
            'original_complex', 'modified_sig', 'freq', 'sample_rate', 'modified_complex',
            'Equalized_signal', 'playback_thread', 'last_pos', 'playback_pos',
            'buffer_size', 'buffer', 'buffer_pos', 'freq_min', 'freq_max',
            'output_sig1', 'output_sig2', 'signal_playing', 'audio_playing',
            'audio_playing2', 'move', 'loaded'
        ]

        for attribute_name in attributes_to_clear:
            setattr(self, attribute_name, np.array([]) if 'np.array([])' in str(getattr(self, attribute_name)) else 0)

        # Clear specific widgets and canvas
        self.inputWidget.clear()
        self.outputWidget.clear()
        self.spectroCanvas.axes.clear()
        self.spectroCanvas.draw()
        self.spectroCanvas2.axes.clear()
        self.spectroCanvas2.draw()
        # Additional specific actions
        self.play_pause_sound()

    def zoom_in_out(self, change):
        ##zooming in by changing x-axis scale
        self.inputWidget.plotItem.getViewBox().scaleBy(x=change, y=1)
        self.outputWidget.plotItem.getViewBox().scaleBy(x=change, y=1)
        self.inputspectroWidget.plotItem.getViewBox().scaleBy(x=change, y=1)
        self.outputspectroWidget.plotItem.getViewBox().scaleBy(x=change, y=1)

    def move_right_left(self, move):
        self.inputWidget.plotItem.getViewBox().translateBy(x=move)
        self.outputWidget.plotItem.getViewBox().translateBy(x=move)
        self.inputspectroWidget.plotItem.getViewBox().translateBy(x=move)
        self.outputspectroWidget.plotItem.getViewBox().translateBy(x=move)

    def speedDown(self):
        # Decrease the speed by reducing the increment value
        self.plotting_speed = max(0, self.plotting_speed - 200)  # Adjust the decrement as needed
        print(f"Speeding up: {self.plotting_speed}")

    def speedUp(self):
        # Increase the speed by increasing the increment value
        self.plotting_speed = min(8000, self.plotting_speed + 200)  # Adjust the increment as needed
        print(f"Slowing down: {self.plotting_speed}")

    def save(self):

        self.outputWidget.clear()
        self.outputspectroWidget.clear()
        Equalized_signal = self.equalize()  # Assuming equalize returns the Equalized_signal
        self.normalized_signal = self.equalize()
        self.move = True

        if Equalized_signal is not None:
            wavfile.write("output1.wav", self.sample_rate, Equalized_signal)
            self.outputWidget.plot(Equalized_signal, pen=pg.mkPen(color=(170, 0, 0)))
            self.spectroCanvas2.axes.specgram(Equalized_signal, Fs=self.fs)
            self.spectroCanvas2.draw()
            self.outputspectroWidget.setCentralItem(self.graph2)
            self.outputspectroWidget.setLayout(self.specLayout2)
        else:
            print("Equalized_signal is None. Check your equalize function.")


    def read_file(self):
        self.clear()
        options = QFileDialog.Options()
        file_dialog = QFileDialog()
        file_dialog.setNameFilter("WAV Files (*.wav);;""CSV Files (*.csv);;All Files (*)")
        filepath, _ = file_dialog.getOpenFileName(None, "Open File", "",
                                                  "WAV Files (*.wav);;CSV Files (*.csv);;All Files (*)",
                                                  options=options)
        self.file_name = os.path.basename(filepath)


        if filepath:
            # Check the file extension
            file_extension = os.path.splitext(filepath)[1].lower()

            if file_extension == '.csv':
                # Assuming CSV file has two columns: Time and Modified_Signal
                df = pd.read_csv(filepath)

                # Print column names for debugging
                print("Column names:", df.columns)

                # Assuming CSV file has two columns, take the first two columns
                if len(df.columns) >= 2:
                    time_column = df.iloc[:, 0]  # Take the first column
                    amplitude_column = df.iloc[:, 1]  # Take the second column

                    # Convert the selected columns to numpy arrays
                    time_values = time_column.to_numpy()
                    amplitude_values = amplitude_column.to_numpy()

                    # Set a reasonable sample rate (e.g., 44100 Hz) or read it from the file if available
                    sample_rate = 44100  # Change this to your desired sample rate

                    # Save the data as a wave file with the specified sample rate
                    wave_filepath = filepath.replace('.csv', '.wav')
                    write(wave_filepath, sample_rate, amplitude_values)

                    self.loaded = True
                    self.filepath = wave_filepath
                    self.sample_rate, self.original_signal = wavfile.read(wave_filepath)
                    print("len(self.original_signal):", len(self.original_signal))
                    print("self.sample_rate:", self.sample_rate)





            elif file_extension == '.wav':
                self.loaded = True
                self.filepath = filepath
                self.sample_rate, self.original_signal = wavfile.read(filepath)
                print("len(self.original_signal):", len(self.original_signal))
                print("self.sample_rate:", self.sample_rate)

            if self.original_signal.ndim == 2:
                self.original_signal = np.mean(self.original_signal, axis=1)

            self.current_index = 0
            self.x = np.arange(0, len(self.original_signal)) / self.sample_rate  # Create the time axis
            self.original_sig = self.original_signal.flatten()  # Flatten the array
            self.convert_freq()

            self.inputWidget.plot(x=self.x, y=self.original_signal, pen=pg.mkPen('b'))

            # Set the x-range
            padding = 0.01 * (np.max(self.x) - np.min(self.x))
            self.inputWidget.setXRange(np.min(self.x) - padding, np.max(self.x) + padding)

            padding = 0.01 * (np.max(self.original_signal) - np.min(self.original_signal))
            self.inputWidget.setYRange(np.min(self.original_signal) - padding, np.max(self.original_signal) + padding)

            self.plot_spectro()

    def plot_data(self, widget, x, data, color='b'):
        widget.plot(x, data, pen=pg.mkPen(color))

    def plot_point_by_point(self):
        self.inputWidget.clear()
        self.inputWidget.setLabel("bottom", text="Time")
        self.inputWidget.setLabel("left", text="Amplitude")

        self.outputWidget.clear()
        self.outputWidget.setLabel("bottom", text="Time")
        self.outputWidget.setLabel("left", text="Amplitude")

        if not self.move:
            self.plot_single_widget(self.original_sig, 'b')
        else:
            self.plot_dual_widget(self.original_sig, self.normalized_signal, 'b', (170, 0, 0))

    def plot_single_widget(self, data, color):
        if self.current_index < len(self.original_sig):
            start_time = self.x[self.current_index]
            end_time = self.x[min(self.current_index + 3000, len(self.original_sig))]

            self.plot_data(self.inputWidget, self.x[self.current_index:self.current_index + 3000],
                           data[self.current_index:self.current_index + 3000], color)

            self.inputWidget.setXRange(start_time, end_time)
            self.set_y_range(self.inputWidget, data, self.current_index)

            self.canvas.draw()
            self.current_index += self.plotting_speed

            if self.current_index >= len(self.original_sig):
                self.signal_timer.stop()

    def plot_dual_widget(self, data1, data2, color1, color2):
        if self.current_index < len(self.original_sig):
            start_time = self.x[self.current_index]
            end_time = self.x[min(self.current_index + 3000, len(self.original_sig))]

            self.plot_data(self.inputWidget, self.x[self.current_index:self.current_index + 3000],
                           data1[self.current_index:self.current_index + 3000], color1)

            self.plot_data(self.outputWidget, self.x[self.current_index:self.current_index + 3000],
                           data2[self.current_index:self.current_index + 3000], color2)

            self.inputWidget.setXRange(start_time, end_time)
            self.outputWidget.setXRange(start_time, end_time)

            combined_data = np.concatenate([data1[self.current_index:self.current_index + 3000],
                                            data2[self.current_index:self.current_index + 3000]])

            self.set_y_range(self.inputWidget, combined_data, self.current_index)
            self.set_y_range(self.outputWidget, combined_data, self.current_index)

            self.canvas.draw()
            self.current_index += self.plotting_speed

            if self.current_index >= len(self.original_sig):
                self.signal_timer.stop()

    def set_y_range(self, widget, data, index):
        if len(data) >= index + 3000:
            min_amplitude = np.min(data[index:index + 3000])
            max_amplitude = np.max(data[index:index + 3000])
            padding = 0.1 * (max_amplitude - min_amplitude)
            widget.setYRange(min_amplitude - padding, max_amplitude + padding)

    def play_pause_signal(self):
        if self.signal_playing == 0:
            # Start playing
            self.signal_timer.start(200)  # Set the timer interval to 500 milliseconds
            self.signal_playing = 1
            self.moveBtn.setText("pause_signal")
        else:
            # Pause playing
            self.signal_timer.stop()
            self.signal_playing = 0
            self.moveBtn.setText("play_signal")

    def callback(self, outdata, frames, time, status):
        if status:
            print(status, file=sys.stderr)

        if self.last_of_sound < len(self.original_signal):
            frames_to_play = len(self.original_signal) - self.last_of_sound

            if frames_to_play < frames:
                # If there are fewer remaining frames than requested, fill the output with the remaining frames
                outdata[:frames_to_play, 0] = self.original_signal[self.last_of_sound:].flatten()
                self.last_of_sound = 0  # Reset playback position for the next iteration
            else:
                # Otherwise, fill the output with the requested number of frames
                outdata[:, 0] = self.original_signal[self.last_of_sound:self.last_of_sound + frames].flatten()
                self.last_of_sound += frames
        else:
            self.last_of_sound = 0

    def callback2(self, outdata2, frames2, time, status):
        if status:
            print(status, file=sys.stderr)

        if self.playback_pos < len(self.normalized_signal):
            remaining_frames = len(self.normalized_signal) - self.playback_pos

            if remaining_frames < frames2:
                # If there are fewer remaining frames than requested, fill the output with the remaining frames
                outdata2[:remaining_frames, 0] = self.normalized_signal[self.playback_pos:].flatten()
                self.playback_pos = 0  # Reset playback position for the next iteration
            else:
                # Otherwise, fill the output with the requested number of frames
                outdata2[:, 0] = self.normalized_signal[self.playback_pos:self.playback_pos + frames2].flatten()
                self.playback_pos += frames2
        else:
            self.playback_pos = 0

    def play_pause_sound(self):
        if self.checkBox.isChecked():
            if not self.audio_playing:
                if hasattr(self, 'stream') and self.stream.active:
                    self.stream.stop()
                    self.stream.close()
                self.stream = sd.OutputStream(callback=self.callback, channels=1, dtype='int16',
                                              samplerate=self.sample_rate, blocksize=8192)
                self.stream.start()
                self.audio_playing = True
                self.soundBtn.setText("Pause Audio")
                self.play_pause_signal()
                self.moveBtn.setText("Move")
            else:
                self.stream.stop()
                self.audio_playing = False
                self.soundBtn.setText("Play Audio")
                self.play_pause_signal()
                self.moveBtn.setText("Move")

        if self.checkoutputwidget.isChecked():
            if not self.audio_playing2:
                if hasattr(self, 'stream2') and self.stream2.active:
                    self.stream2.stop()
                    self.stream2.close()
                self.stream2 = sd.OutputStream(channels=1, callback=self.callback2, samplerate=self.fs,
                                               blocksize=8192 * 4)
                self.stream2.start()
                self.audio_playing2 = True
                self.soundBtn.setText("Pause Audio")
                self.play_pause_signal()
                self.moveBtn.setText("Move")
            else:
                self.stream2.stop()
                self.stream2.close()
                self.audio_playing2 = False
                self.soundBtn.setText("Play Audio")
                self.play_pause_signal()
                self.moveBtn.setText("Move")
        else:
            pass

    def replay(self):
        self.signal_timer.stop()
        self.current_index = 0
        self.signal_playing = 0
        self.last_of_sound = 0
        self.playback_pos = 0
        self.inputWidget.clear()
        self.outputWidget.clear()

        if self.checkBox.isChecked() and not self.checkoutputwidget.isChecked():
            self.audio_playing = False
            self.play_pause_signal()

        elif self.checkoutputwidget.isChecked() and not self.checkBox.isChecked():
            self.audio_playing2 = False
            self.play_pause_signal()

        else:
            self.audio_playing = False
            self.audio_playing2 = False

        self.play_pause_sound()
        self.play_pause_signal()

    def update_checkoutputBox(self, state):
        # Update the state of checkoutputwidget when checkBox is checked or unchecked
        if state == 2:  # Checked state
            self.checkoutputwidget.setChecked(False)
        else:
            self.checkoutputwidget.setChecked(True)
            self.updateSoundBtnText()

    def update_checkBox(self, state):
        # Update the state of checkBox when checkoutputBox is checked or unchecked
        if state == 2:  # Checked state
            self.checkBox.setChecked(False)
        else:
            self.checkBox.setChecked(True)
            self.updateSoundBtnText()

    def updateSoundBtnText(self):
        self.soundBtn.setText("Sound")

    def toggleGraphVisibility(self, state):
        if state == QtCore.Qt.Checked:
            # Show the graphs (assuming self.graph1 and self.graph2 are your graph widgets)
            self.inputspectroWidget.hide()
            self.outputspectroWidget.hide()
        else:
            # Hide the graphs
            self.inputspectroWidget.show()
            self.outputspectroWidget.show()

    def convert_freq(self):
        # Convert the original signal to its frequency domain representation
        self.original_complex = rfft(self.original_sig)
        # Make a copy of the frequency representation for modification
        self.modified_complex = np.copy(self.original_complex)
        # Calculate the frequency values corresponding to the frequency representation
        self.freq = rfftfreq(len(self.original_complex) + 1, 1 / self.sample_rate)
        # Keep only positive frequencies (remove negative frequencies and the zero frequency)
        self.freq = self.freq[self.freq > 0]
        self.data_line.setData(self.freq, abs(self.modified_complex))
        # self.editingWidget.getPlotItem().getViewBox().setMouseEnabled(x=False, y=True)

    def plot_spectro(self):
        self.spectroCanvas.axes.specgram(self.original_sig, Fs=self.sample_rate)
        self.spectroCanvas.draw()
        self.inputspectroWidget.setCentralItem(self.graph)
        self.inputspectroWidget.setLayout(self.specLayout)


    def connect_sliders(self, i):
        self.sliderarr[i].valueChanged.connect(self.equalize)

    def update_ui(self):
        for slider in self.sliderarr:
            slider.setValue(1)

        combo_settings = {
            0: (range(1, 11), "0-2200 2200-4400 4400-6600 6600-8800 8800-11000 11000-13200 13200-15400 15400-17600 17600-19800 19800-22000".split()),
            1: (range(1, 5), "bass triangle trombone. xylephone ".split()),
            2: (range(1, 5), "Owl Frog Canary insect".split()),
            3: (range(1, 5), "Normal Aflut Vt Afib".split())
        }

        index = self.comboBox.currentIndex()
        slider_range, label_text = combo_settings.get(index, ([], []))

        for i in range(1, 11):
            vslider = getattr(self, f'vSlider{i}')
            label = getattr(self, f'label_{i}')

            if i in slider_range:
                vslider.setVisible(True)
                label.setVisible(True)
            else:
                vslider.setVisible(False)
                label.setVisible(False)

        for i, text in zip(range(1, 11), label_text):
            label = getattr(self, f'label_{i}')
            label.setText(text)

    def equalize(self, x=None, value=None):
        equalization_types = {
            # uniform
            0: ([0, 2201, 4401, 6601, 8801, 11001, 13201, 15401, 17601, 19801], [2200, 4400, 6600, 8800, 11000, 13200, 15400, 17600, 19800, 22000]),

            # music [bass, triangle,  trombone,xelyphone]
            1: ([0, 351, 860, 4200], [350, 1000, 4000, 22000]),
            # Animal [owl   frog  canary  insect ]
            2: ([650, 951, 3000,  6000], [950, 1900, 5500,  20000]),
            # ECG [ normal, arr1, arr2, arr3]
            # 3: ([39, 120, 201, 400], [190, 200, 350, 500]),
            3: ([39, 51, 120, 1101], [190, 60, 200, 1200]),



        }


        Gains = [slider.value() for slider in self.sliderarr]
        self.fs, self.data = wavfile.read(self.filepath)

        self.original_sig = self.data / 2.0 ** 15
        self.original_sig = self.original_sig.flatten()  # Flatten the array

        N = len(self.original_sig)

        freq_min, freq_max = equalization_types.get(self.comboBox.currentIndex(), ([], []))

        # Apply the selected window function
        window_function = self.get_window_function()

        windowed_data = self.original_sig * window_function
        rfft_coeff = np.fft.rfft(windowed_data)
        self.freq = np.fft.rfftfreq(N, 1. / self.fs)

        for i in range(len(freq_max)):
            if i < len(Gains):
                # Use boolean indexing to select the relevant frequency range
                freq_range_mask = np.logical_and(self.freq >= freq_min[i], self.freq <= freq_max[i])
                rfft_coeff[freq_range_mask] *= Gains[i]

        Equalized_signal = np.fft.irfft(rfft_coeff)
        self.data_line.setData(self.freq, abs(rfft_coeff))
        normalized_signal = Equalized_signal / np.max(np.abs(Equalized_signal))

        self.plot_equalized_signals(freq_min, freq_max, Gains)
        return normalized_signal

    def get_window_function(self):
        if self.tabWidget.currentIndex() == 0:
            return np.ones(len(self.original_sig))
        elif self.tabWidget.currentIndex() == 1:
            return hann(len(self.original_sig))
        elif self.tabWidget.currentIndex() == 2:
            return hamming(len(self.original_sig))
        elif self.tabWidget.currentIndex() == 3:
            return gaussian(len(self.original_sig), std=len(self.original_sig) / 6)

    def plot_equalized_signals(self, freq_min, freq_max, Gains):
        num_sliders = len(self.sliderarr)
        self.editingWidget.clear()
        self.editingWidget.addItem(self.data_line)

        for i in range(num_sliders):
            if i < len(freq_min):
                slider_value = self.sliderarr[i].value()
                t_start = freq_min[i]
                t_end = freq_max[i]
                t = np.linspace(t_start, t_end, 10)

                if self.tabWidget.currentIndex() == 0:
                    scaled_wave = 100 * slider_value * np.abs(np.sign(np.sin(2 * np.pi * 1 * t)))
                elif self.tabWidget.currentIndex() == 1:
                    scaled_wave = 100 * slider_value * np.hanning(len(t))
                elif self.tabWidget.currentIndex() == 2:
                    scaled_wave = 100 * slider_value * np.hamming(len(t))
                elif self.tabWidget.currentIndex() == 3:
                    scaled_wave = 100 * slider_value * gaussian(len(t), std=len(t) / 6)

                self.editingWidget.plot(t, scaled_wave, pen={'color': 'r', 'width': 1})



        # self.editingWidget.getPlotItem().getViewBox().setMouseEnabled(x=False, y=True)








    def retranslateUi(self, MainWindow):
            _translate = QtCore.QCoreApplication.translate
            MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
            self.comboBox.setItemText(0, _translate("MainWindow", "Uniform mode"))
            self.comboBox.setItemText(1, _translate("MainWindow", "musical instrument mode"))
            self.comboBox.setItemText(2, _translate("MainWindow", "animal mode"))
            self.comboBox.setItemText(3, _translate("MainWindow", "ecg mode"))
            self.spectroShow.setText(_translate("MainWindow", "Show/Hide Spectrogram"))
            self.spectroShow.setShortcut(_translate("MainWindow", "Ctrl+H"))
            # self.Rectangle.setText(_translate("MainWindow", "Rectangle"))
            # self.Hanning.setText(_translate("MainWindow", "Hanning"))
            # self.Hamming.setText(_translate("MainWindow", "Hamming"))
            # self.Gaussian.setText(_translate("MainWindow", "Gaussian"))
            self.toolBar.setWindowTitle(_translate("MainWindow", "toolBar"))
            self.leftBtn.setText(_translate("MainWindow", "Scroll Left"))
            self.leftBtn.setToolTip(_translate("MainWindow", "Scroll Left"))
            self.leftBtn.setShortcut(_translate("MainWindow", "Ctrl+Left"))
            self.rightBtn.setText(_translate("MainWindow", "Scroll Right"))
            self.rightBtn.setToolTip(_translate("MainWindow", "Scroll Right"))
            self.rightBtn.setShortcut(_translate("MainWindow", "Ctrl+Right"))
            self.zoomOutBtn.setText(_translate("MainWindow", "Zoom Out"))
            self.zoomOutBtn.setToolTip(_translate("MainWindow", "Zoom Out"))
            self.zoomOutBtn.setShortcut(_translate("MainWindow", "-"))
            self.OpenSignalBtn.setText(_translate("MainWindow", "Open Signal"))
            self.OpenSignalBtn.setToolTip(_translate("MainWindow", "Open Signal"))
            self.OpenSignalBtn.setShortcut(_translate("MainWindow", "Ctrl+L"))
            self.soundBtn.setText(_translate("MainWindow", "Sound"))
            self.soundBtn.setToolTip(_translate("MainWindow", "Sound"))
            self.soundBtn.setShortcut(_translate("MainWindow", "F5"))
            self.saveBtn.setText(_translate("MainWindow", "Save"))
            self.saveBtn.setToolTip(_translate("MainWindow", "Save a report pdf"))
            self.saveBtn.setShortcut(_translate("MainWindow", "Ctrl+S"))
            self.zoomInBtn.setText(_translate("MainWindow", "Zoom In"))
            self.zoomInBtn.setToolTip(_translate("MainWindow", "Zoom In"))
            self.zoomInBtn.setShortcut(_translate("MainWindow", "+"))
            self.moveBtn.setText(_translate("MainWindow", "Move"))
            self.moveBtn.setToolTip(_translate("MainWindow", "Move"))
            self.moveBtn.setShortcut(_translate("MainWindow", "Ctrl+M"))
            self.returnBtn.setText(_translate("MainWindow", "Return"))
            self.returnBtn.setToolTip(_translate("MainWindow", "Return"))
            self.returnBtn.setShortcut(_translate("MainWindow", "Ctrl+Shift+R"))
            self.speedBtn.setText(_translate("MainWindow", "SpeedUp"))
            self.speedBtn.setToolTip(_translate("MainWindow", "Increase graph speed"))
            self.speedBtn.setShortcut(_translate("MainWindow", "Ctrl+Up"))
            self.slowBtn.setText(_translate("MainWindow", "SpeedDown"))
            self.slowBtn.setToolTip(_translate("MainWindow", "Decrease graph speed"))
            self.slowBtn.setShortcut(_translate("MainWindow", "Ctrl+Down"))

            self.clearBtn.setText(_translate("MainWindow", "clear"))
            self.clearBtn.setToolTip(_translate("MainWindow", "clear"))

            # self.pushRectangleButton.setText(QCoreApplication.translate("MainWindow", u"Add", None))
            self.tabWidget.setTabText(self.tabWidget.indexOf(self.Rectangular),
                                      QCoreApplication.translate("MainWindow", u"Rectangle", None))
            #
            # self.pushHanningButton.setText(QCoreApplication.translate("MainWindow", u"Add", None))
            self.tabWidget.setTabText(self.tabWidget.indexOf(self.Hanning),
                                      QCoreApplication.translate("MainWindow", u"Hanning", None))
            #
            # self.pushHammingButton.setText(QCoreApplication.translate("MainWindow", u"Add", None))
            self.tabWidget.setTabText(self.tabWidget.indexOf(self.Hamming),
                                      QCoreApplication.translate("MainWindow", u"Hamming", None))
            #
            # self.pushGaussianButton.setText(QCoreApplication.translate("MainWindow", u"Add", None))
            self.tabWidget.setTabText(self.tabWidget.indexOf(self.Gaussian),
                                      QCoreApplication.translate("MainWindow", u"Gaussian", None))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())









